{
  "permissions": {
    "allow": [
      "Bash(ENABLE_AUTHENTICATION=true python -c \"\nfrom doris_mcp_server.utils.config import DorisConfig\nconfig = DorisConfig.from_env()\nprint(f''ENABLE_AUTHENTICATION from env: {config.security.enable_authentication}'')\n\")",
      "Bash(ENABLE_AUTHENTICATION=true python -c \"\nfrom doris_mcp_server.utils.config import DorisConfig\nconfig = DorisConfig.from_env()\nprint(f''ENABLE_AUTHENTICATION from env: {config.security.enable_authentication}'')\n\")",
      "Bash(ENABLE_AUTHENTICATION=true python -c \"\nfrom doris_mcp_server.utils.config import DorisConfig\nfrom doris_mcp_server.utils.security import DorisSecurityManager\nimport asyncio\n\nasync def test_token():\n    config = DorisConfig.from_env()\n    security_manager = DorisSecurityManager(config)\n    await security_manager.initialize()\n    \n    # 测试admin_token_456\n    try:\n        result = await security_manager.authenticate_request({\n            ''token'': ''admin_token_456'',\n            ''client_ip'': ''127.0.0.1''\n        })\n        print(f''Token验证成功: {result.token_id}'')\n    except Exception as e:\n        print(f''Token验证失败: {e}'')\n    \n    # 列出所有tokens\n    tokens = await security_manager.list_tokens()\n    print(f''可用tokens: {[t[\"\"token_id\"\"] for t in tokens]}'')\n    \n    await security_manager.shutdown()\n\nasyncio.run(test_token())\n\")",
      "Bash(ENABLE_TOKEN_AUTH=true python -c:*)",
      "Bash(env)",
      "Read(//private/tmp/**)",
      "Bash(pkill:*)"
    ],
    "deny": [],
    "ask": []
  }
}